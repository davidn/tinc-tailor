#!/usr/bin/env python

from tailor.tinc import Tinc
from tailor.check import Check
from tailor.run import Run
from tailor.cloudfabric import Cloudfabric
from tailor.test import TestRunner
from argparse import ArgumentParser, FileType
from logging import getLogger, DEBUG, StreamHandler, Formatter, INFO,\
    getLevelName, WARNING
from copy import copy

class ColoredConsoleHandler(StreamHandler):
    def emit(self, record):
        # Need to make a actual copy of the record
        # to prevent altering the message for other loggers
        myrecord = copy(record)
        levelno = myrecord.levelno
        if(levelno >= 50):  # CRITICAL / FATAL
            color = '\x1b[31m'  # red
        elif(levelno >= 40):  # ERROR
            color = '\x1b[31m'  # red
        elif(levelno >= 30):  # WARNING
            color = '\x1b[33m'  # yellow
        elif(levelno >= 20):  # INFO
            color = '\x1b[32m'  # green
        elif(levelno >= 10):  # DEBUG
            color = '\x1b[35m'  # pink
        else:  # NOTSET and anything else
            color = '\x1b[0m'  # normal
        myrecord.msg = color + str(myrecord.msg) + '\x1b[0m'  # normal
        StreamHandler.emit(self, myrecord)

if __name__ == '__main__':
    parser = ArgumentParser(description='''tinc-tailor is a tool for managing a cluster of CloudFabric servers using tinc as a VPN.''')
    parser.add_argument('-H','--host', dest='hosts', type=str, metavar='HOSTNAME', action='append', help='''This option, which can be specified multiple times, tells tinc-tailor which hosts are in the cluster. If this option or --host-file is set, the default hosts.list file is not read.''')    
    parser.add_argument('-f','--hosts-file', type=FileType('r'), help='''Each line in the given file is interpreted as a host, as if given to the --host option.''')
    parser.add_argument('-n','--netname', type=str, default='cf', help='''For tinc, this specifies the name of the vpn network to create, and the name of the interface to create. For cloudfabric this specifies the interface for inter-node communication.''')
    parser.add_argument('-k','--key', type=str, default=[], action='append', help='''This option, which can be specified multiple times, specifies an ssh private key file to try to use to connect to the nodes.  In all cases ~/.ssh/id_rsa and ~/.ssh/id_dsa are tried to.  Note that ~/.ssh/config is ignored.''')
    parser.add_argument('-l','--log-level', default=WARNING, help='''This option determines the amount of information to be logged. The default is WARNING, which prints very little.''')
    parser.add_argument('--global-log-level', default=None, help='As --log-level, but also log higher detail from python libraries used, for example for debugging the SSH connection.''')
    subparsers = parser.add_subparsers(title='tool', dest='tool', description='''Sub-system to configure. You can run `tinc-tailor TOOL -h` to see help specific to that sub-system.''')
    Tinc.setup_argparse(subparsers.add_parser('tinc', help='Configure tinc VPN.'))
    Cloudfabric.setup_argparse(subparsers.add_parser('cloudfabric', help='Configure CloudFabric database.'))
    Check.setup_argparse(subparsers.add_parser('check', help='Test all hosts are able to ping each other.'))
    Run.setup_argparse(subparsers.add_parser('run', help='Run a command on all hosts.'))
    TestRunner.setup_argparse(subparsers.add_parser('test', help='Run tests.'))
    params = parser.parse_args()
    root = getLogger('')
    if params.global_log_level is not None:
        root.setLevel(params.global_log_level)
    handler = ColoredConsoleHandler()
    handler.setFormatter(Formatter('%(name)s: %(message)s'))
    root.addHandler(handler)
    logger = getLogger('tailor')
    logger.setLevel(params.log_level)
    logger.debug("Starting tailor")
    print params
    if params.hosts_file is None and len(params.hosts) is 0:
        params.hosts_file = open('hosts.list')
    if params.hosts_file is not None:
        params.hosts.extend(line.strip() for line in params.hosts_file.readlines())
    
    if params.tool == 'check':
        Check(params).run()
    elif params.tool == 'run':
        Run(params).run()
    elif params.tool == 'tinc':
        Tinc(params).run()
    elif params.tool == 'cloudfabric':
        Cloudfabric(params).run()
    elif params.tool == 'test':
        TestRunner(params).run()
