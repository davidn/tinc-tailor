#!/usr/bin/env python

from tailor.tinc import Tinc
from tailor.test import Test
from tailor.run import Run
from argparse import ArgumentParser, FileType
from logging import getLogger, DEBUG, StreamHandler, Formatter, INFO,\
    getLevelName, WARNING
from copy import copy

class ColoredConsoleHandler(StreamHandler):
    def emit(self, record):
        # Need to make a actual copy of the record
        # to prevent altering the message for other loggers
        myrecord = copy(record)
        levelno = myrecord.levelno
        if(levelno >= 50):  # CRITICAL / FATAL
            color = '\x1b[31m'  # red
        elif(levelno >= 40):  # ERROR
            color = '\x1b[31m'  # red
        elif(levelno >= 30):  # WARNING
            color = '\x1b[33m'  # yellow
        elif(levelno >= 20):  # INFO
            color = '\x1b[32m'  # green
        elif(levelno >= 10):  # DEBUG
            color = '\x1b[35m'  # pink
        else:  # NOTSET and anything else
            color = '\x1b[0m'  # normal
        myrecord.msg = color + str(myrecord.msg) + '\x1b[0m'  # normal
        StreamHandler.emit(self, myrecord)

if __name__ == '__main__':
    parser = ArgumentParser(description='Install tinc on a set of servers.')
    parser.add_argument('-H','--hosts', type=str, metavar='HOSTNAME', default=[], nargs='*', help='Host to connect to')
    parser.add_argument('-f','--hosts-file', type=FileType('r'), default=None, help='List of hosts to connect to')
    parser.add_argument('-n','--netname', type=str, default='cf', help='Tinc netname')
    parser.add_argument('-l','--log-level', default=WARNING, help='Level log detail to log')
    parser.add_argument('--global-log-level', default=None, help='Level log all messages')
    subparsers = parser.add_subparsers(title='tool', dest='tool')
    Tinc.setup_argparse(subparsers.add_parser('tinc', help='Configure tinc VPN.'))
    Test.setup_argparse(subparsers.add_parser('test', help='Test all hosts are able to ping each other.'))
    Run.setup_argparse(subparsers.add_parser('run', help='Run a command on all hosts.'))
    params = parser.parse_args()
    root = getLogger('')
    if params.global_log_level is not None:
        root.setLevel(params.global_log_level)
    handler = ColoredConsoleHandler()
    handler.setFormatter(Formatter('%(name)s: %(message)s'))
    root.addHandler(handler)
    logger = getLogger('tailor')
    logger.setLevel(params.log_level)
    logger.debug("Starting tailor")
    
    if params.hosts_file is None and len(params.hosts) is 0:
        params.hosts_file = open('hosts.list')
    if params.hosts_file is not None:
        params.hosts.extend(line.strip() for line in params.hosts_file.readlines())
    
    if params.tool == 'test':
        Test(params).run()
    elif params.tool == 'run':
        Run(params).run()
    elif params.tool == 'tinc':
        Tinc(params).run()